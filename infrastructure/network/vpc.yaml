AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This CloudFormation template creates a Virtual Private Cloud (VPC) with two public and two private subnets spread across two Availability Zones (AZs) in an AWS region, 
  along with an internet gateway attached to the VPC to enable communication between the public subnets and the internet. 
  Additionally, the template creates two elastic IP addresses, a pair of NAT gateways (one in each AZ), and default routes for them in private subnets to enable communication from the private subnets to the internet. 
  Each NAT gateway uses an elastic IP address to provide it with a public IP address that doesn't change.
  The template uses parameters to allow customization of the IP ranges for the VPC and its subnets.
  The resources created by the template include a VPC, four subnets (two public and two private), an internet gateway, two NAT gateways, and route tables for the subnets. 
  Finally, the template creates security groups for the load balancer, backend server, and database.

Parameters:
  VpcName:
    Description: The name of the VPC being created.
    Type: String
    Default: project

  NumberOfNatGateways:
    Type: Number
    Default: 1
    AllowedValues:
      - 0
      - 1
      - 2

  SshLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions:
  CreateOneNatGateway: !Or [!Equals [!Ref NumberOfNatGateways, 1], !Equals [!Ref NumberOfNatGateways, 2]]
  CreateTwoNatGateways: !Equals [!Ref NumberOfNatGateways, 2]

Mappings:
  # Maps CIDR blocks to VPC and various subnets
  CidrMap:
    Vpc:
      Cidr: 10.0.0.0/16
    Public1:
      Cidr: 10.0.10.0/24
    Public2:
      Cidr: 10.0.11.0/24
    Private1:
      Cidr: 10.0.20.0/24
    Private2:
      Cidr: 10.0.21.0/24

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CidrMap, Vpc, Cidr]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrMap, Public1, Cidr]
      AvailabilityZone: !Select [0, !GetAZs ] # Get the first AZ in the list
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref VpcName, "-public-", !Select [0, !GetAZs ]]]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrMap, Public2, Cidr]
      AvailabilityZone: !Select [1, !GetAZs ] # Get the second AZ in the list
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref VpcName, "-public-", !Select [1, !GetAZs ]]]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrMap, Private1, Cidr]
      AvailabilityZone: !Select [0, !GetAZs ] # Get the first AZ in the list
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref VpcName, "-private-", !Select [0, !GetAZs ]]]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [CidrMap, Private2, Cidr]
      AvailabilityZone: !Select [1, !GetAZs ] # Get the second AZ in the list
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref VpcName, "-private-", !Select [1, !GetAZs ]]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-IGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-public-route-table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGateway1Eip:
    Type: AWS::EC2::EIP
    Condition: CreateOneNatGateway
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: CreateOneNatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1Eip.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2Eip:
    Type: AWS::EC2::EIP
    Condition: CreateTwoNatGateways
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateTwoNatGateways
    Properties:
      AllocationId: !GetAtt NatGateway2Eip.AllocationId
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-private-route-table-0
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: CreateOneNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-private-route-table-1
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: CreateTwoNatGateways
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshLocation
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-BastionHostSecurityGroup

  BackendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Enable HTTP and HTTPS access from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-BackendLoadBalancerSecurityGroup

  BackendServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Enable SSH access from the bastion host and enable HTTP/HTTPS from the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref BackendLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref BackendLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-BackendServerSecurityGroup

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Enable access on MySQl port from the backend server and the bastion host
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref BackendServerSecurityGroup
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - SourceSecurityGroupId: !Ref BastionHostSecurityGroup
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DbSecurityGroup

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-VpcId

  PublicSubnet1:
    Description: The of ID of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Description: The of ID of public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: The of ID of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Description: The of ID of private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  DefaultSecurityGroup:
    Description: The ID of the default security group for the VPC
    Value: !GetAtt Vpc.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DefaultSecurityGroup
  BackendLoadBalancerSecurityGroupId:
    Description: Backend LoadBalancer security group ID
    Value: !GetAtt BackendLoadBalancerSecurityGroup.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-BackendLoadBalancerSecurityGroup
  BackendServerSecurityGroupId:
    Description: Backend EC2 security group ID
    Value: !GetAtt BackendServerSecurityGroup.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-BackendServerSecurityGroup
  DbSecurityGroupId:
    Description: Database security group ID
    Value: !GetAtt DbSecurityGroup.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-DbSecurityGroup
